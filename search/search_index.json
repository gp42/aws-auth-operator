{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Auth Operator This operator helps to manage 'aws-auth' ConfigMap for AWS EKS. The challenge with aws-auth ConfigMap this operator is trying to solve is manual effort to maintain the ConfigMap. The ConfigMap allows to let specific AWS IAM Roles and Users to use the EKS cluster, but both approaches are not ideal because: Using MapRoles does not show which user was executing cluster actions in Kubernetes Audit logs Using MapUsers resolves the Kubernetes Audit log issue, but there are no good tools to manage the users This operator is supposed to solve these problems by providing a tool for automated IAM Group synchronization and aws-auth ConfigMap management. Read my blog article on IAM User Traceability in AWS EKS for more information on the use-cases. Installation Please check the installation section","title":"AWS Auth Operator"},{"location":"#aws-auth-operator","text":"This operator helps to manage 'aws-auth' ConfigMap for AWS EKS. The challenge with aws-auth ConfigMap this operator is trying to solve is manual effort to maintain the ConfigMap. The ConfigMap allows to let specific AWS IAM Roles and Users to use the EKS cluster, but both approaches are not ideal because: Using MapRoles does not show which user was executing cluster actions in Kubernetes Audit logs Using MapUsers resolves the Kubernetes Audit log issue, but there are no good tools to manage the users This operator is supposed to solve these problems by providing a tool for automated IAM Group synchronization and aws-auth ConfigMap management. Read my blog article on IAM User Traceability in AWS EKS for more information on the use-cases.","title":"AWS Auth Operator"},{"location":"#installation","text":"Please check the installation section","title":"Installation"},{"location":"installation/","text":"Installation Installation Options Operator Lifecycle Manager (OLM) from operatorhub.io Operator Lifecycle Manager (OLM) Manual Installation Operator Lifecycle Manager (OLM) from operatorhub.io Check the deploy directory for manifest examples. These instructions assume that you have OLM installed in the default olm namespace. Create an OperatorGroup kubectl create namespace aws-auth-operator-system kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/operatorhub/operatorgroup.yaml Install subscription Make sure to set AWS secrets for the operator. See AWS User Policy section for required access for this user. This example shows how to set the secrets using 'Secret' resource: kubectl create secret generic \\ -n aws-auth-operator-system \\ aws-auth-operator-secret \\ --from-literal = AWS_ACCESS_KEY_ID = \"<key>\" \\ --from-literal = AWS_SECRET_ACCESS_KEY = \"<secret>\" \\ --from-literal = AWS_DEFAULT_REGION = \"<region>\" kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/operatorhub/subscription.yaml Approve InstallPlan Wait for subsctiption, you can check current status with the following commands: kubectl get subscriptions -n aws-auth-operator-system aws-auth-operator kubectl describe subscription -n aws-auth-operator-system aws-auth-operator Manually approve the InstallPlan: kubectl get installplans -n aws-auth-operator-system kubectl patch installplan <InstallPlan Name> --type merge --patch '{\"spec\": {\"approved\": true}}' If the InstallPlan does not appear, check olm logs: kubectl logs -f -n olm <olm-operator-xxx pod name> Check if the operator was successfully deployed: kubectl get csv -n aws-auth-operator-system kubectl get pods -n aws-auth-operator-system Operator Lifecycle Manager (OLM) Check the deploy directory for manifest examples. These instructions assume that you have OLM installed in the default olm namespace. Install catalog source kubectl apply -n olm -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/olm/catalogsource.yaml # verify kubectl describe catalogsource -n olm aws-auth-operator-catalog Create an OperatorGroup kubectl create namespace aws-auth-operator-system kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/olm/operatorgroup.yaml Install subscription Make sure to set AWS secrets for the operator. See AWS User Policy section for required access for this user. This example shows how to set the secrets using 'Secret' resource: kubectl create secret generic \\ -n aws-auth-operator-system \\ aws-auth-operator-secret \\ --from-literal = AWS_ACCESS_KEY_ID = \"<key>\" \\ --from-literal = AWS_SECRET_ACCESS_KEY = \"<secret>\" \\ --from-literal = AWS_DEFAULT_REGION = \"<region>\" kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/olm/subscription.yaml Approve InstallPlan Wait for subsctiption, you can check current status with the following commands: kubectl get subscriptions -n aws-auth-operator-system aws-auth-operator kubectl describe subscription -n aws-auth-operator-system aws-auth-operator Manually approve the InstallPlan: kubectl get installplans -n aws-auth-operator-system kubectl patch installplan <InstallPlan Name> --type merge --patch '{\"spec\": {\"approved\": true}}' If the InstallPlan does not appear, check olm logs: kubectl logs -f -n olm <olm-operator-xxx pod name> Check if the operator was successfully deployed: kubectl get csv -n aws-auth-operator-system kubectl get pods -n aws-auth-operator-system Manual Installation Namespace Create a new namespace for the operator kubectl create namespace aws-auth-operator-system Install CRDs Install Custom Resource Definitions kubectl apply -n aws-auth-operator-system -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/crds.yaml Create Secrets Make sure to set AWS secrets for the operator. See AWS User Policy section for required access for this user. This example shows how to set the secrets using 'Secret' resource: kubectl create secret generic \\ -n aws-auth-operator-system \\ aws-auth-operator-secret \\ --from-literal = AWS_ACCESS_KEY_ID = \"<key>\" \\ --from-literal = AWS_SECRET_ACCESS_KEY = \"<secret>\" \\ --from-literal = AWS_DEFAULT_REGION = \"<region>\" Install all other resources kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/serviceaccount.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/deployment.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role_binding.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role_leader_election.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role_binding_leader_election.yaml ** AWS User Policy AWS user which keys are provided to the operator, must have the following policy attached to be able to do IAM group scanning: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"VisualEditor0\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:GetGroup\" , \"Resource\" : \"*\" } ] } Usage See Usage section.","title":"Installation"},{"location":"installation/#installation","text":"Installation Options Operator Lifecycle Manager (OLM) from operatorhub.io Operator Lifecycle Manager (OLM) Manual Installation","title":"Installation"},{"location":"installation/#operator-lifecycle-manager-olm-from-operatorhubio","text":"Check the deploy directory for manifest examples. These instructions assume that you have OLM installed in the default olm namespace. Create an OperatorGroup kubectl create namespace aws-auth-operator-system kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/operatorhub/operatorgroup.yaml Install subscription Make sure to set AWS secrets for the operator. See AWS User Policy section for required access for this user. This example shows how to set the secrets using 'Secret' resource: kubectl create secret generic \\ -n aws-auth-operator-system \\ aws-auth-operator-secret \\ --from-literal = AWS_ACCESS_KEY_ID = \"<key>\" \\ --from-literal = AWS_SECRET_ACCESS_KEY = \"<secret>\" \\ --from-literal = AWS_DEFAULT_REGION = \"<region>\" kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/operatorhub/subscription.yaml Approve InstallPlan Wait for subsctiption, you can check current status with the following commands: kubectl get subscriptions -n aws-auth-operator-system aws-auth-operator kubectl describe subscription -n aws-auth-operator-system aws-auth-operator Manually approve the InstallPlan: kubectl get installplans -n aws-auth-operator-system kubectl patch installplan <InstallPlan Name> --type merge --patch '{\"spec\": {\"approved\": true}}' If the InstallPlan does not appear, check olm logs: kubectl logs -f -n olm <olm-operator-xxx pod name> Check if the operator was successfully deployed: kubectl get csv -n aws-auth-operator-system kubectl get pods -n aws-auth-operator-system","title":"Operator Lifecycle Manager (OLM) from operatorhub.io"},{"location":"installation/#operator-lifecycle-manager-olm","text":"Check the deploy directory for manifest examples. These instructions assume that you have OLM installed in the default olm namespace. Install catalog source kubectl apply -n olm -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/olm/catalogsource.yaml # verify kubectl describe catalogsource -n olm aws-auth-operator-catalog Create an OperatorGroup kubectl create namespace aws-auth-operator-system kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/olm/operatorgroup.yaml Install subscription Make sure to set AWS secrets for the operator. See AWS User Policy section for required access for this user. This example shows how to set the secrets using 'Secret' resource: kubectl create secret generic \\ -n aws-auth-operator-system \\ aws-auth-operator-secret \\ --from-literal = AWS_ACCESS_KEY_ID = \"<key>\" \\ --from-literal = AWS_SECRET_ACCESS_KEY = \"<secret>\" \\ --from-literal = AWS_DEFAULT_REGION = \"<region>\" kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/olm/subscription.yaml Approve InstallPlan Wait for subsctiption, you can check current status with the following commands: kubectl get subscriptions -n aws-auth-operator-system aws-auth-operator kubectl describe subscription -n aws-auth-operator-system aws-auth-operator Manually approve the InstallPlan: kubectl get installplans -n aws-auth-operator-system kubectl patch installplan <InstallPlan Name> --type merge --patch '{\"spec\": {\"approved\": true}}' If the InstallPlan does not appear, check olm logs: kubectl logs -f -n olm <olm-operator-xxx pod name> Check if the operator was successfully deployed: kubectl get csv -n aws-auth-operator-system kubectl get pods -n aws-auth-operator-system","title":"Operator Lifecycle Manager (OLM)"},{"location":"installation/#manual-installation","text":"Namespace Create a new namespace for the operator kubectl create namespace aws-auth-operator-system Install CRDs Install Custom Resource Definitions kubectl apply -n aws-auth-operator-system -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/crds.yaml Create Secrets Make sure to set AWS secrets for the operator. See AWS User Policy section for required access for this user. This example shows how to set the secrets using 'Secret' resource: kubectl create secret generic \\ -n aws-auth-operator-system \\ aws-auth-operator-secret \\ --from-literal = AWS_ACCESS_KEY_ID = \"<key>\" \\ --from-literal = AWS_SECRET_ACCESS_KEY = \"<secret>\" \\ --from-literal = AWS_DEFAULT_REGION = \"<region>\" Install all other resources kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/serviceaccount.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/deployment.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role_binding.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role_leader_election.yaml kubectl apply -f https://raw.githubusercontent.com/gp42/aws-auth-operator/main/deploy/manual/role_binding_leader_election.yaml **","title":"Manual Installation"},{"location":"installation/#aws-user-policy","text":"AWS user which keys are provided to the operator, must have the following policy attached to be able to do IAM group scanning: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"VisualEditor0\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:GetGroup\" , \"Resource\" : \"*\" } ] }","title":"AWS User Policy"},{"location":"installation/#usage","text":"See Usage section.","title":"Usage"},{"location":"usage/","text":"Usage The operator is looking for a AwsAuthSyncConfig resource in kube-system namespace to read its configuration. Example resource can be found in github repo . At the moment only synchronization of IAM user groups to Kubernetes RBAC groups is supported. For example the following configuration will look for users existing in 'source' IAM group named 'dev-operator-k8s-admins' and create mappings in 'aws-auth' ConfigMap. apiVersion : auth.ops42.org/v1alpha1 kind : AwsAuthSyncConfig metadata : name : default namespace : kube-system spec : syncIamGroups : - source : dev-operator-k8s-admins dest : dev-operator-k8s-admins - source : dev-operator-k8s-users dest : dev-operator-k8s-users Assuming the user named 'john' is a member of both, 'dev-operator-k8s-admins' and 'dev-operator-k8s-users' groups, while user 'fred' is only a member of the 'dev-operator-k8s-users' group in IAM, aws-auth ConfigMap will be modified accordingly: ... mapUsers : | - userarn: arn:aws:iam::XXXXXXXXXXXX:user/john username: john groups: - dev-operator-k8s-admins - dev-operator-k8s-users - userarn: arn:aws:iam::XXXXXXXXXXXX:user/fred username: fred groups: - dev-operator-k8s-users IMPORTANT The operator rewrites the data.mapUsers part of the aws-auth configmap. Other parts remain untouched.","title":"Usage"},{"location":"usage/#usage","text":"The operator is looking for a AwsAuthSyncConfig resource in kube-system namespace to read its configuration. Example resource can be found in github repo . At the moment only synchronization of IAM user groups to Kubernetes RBAC groups is supported. For example the following configuration will look for users existing in 'source' IAM group named 'dev-operator-k8s-admins' and create mappings in 'aws-auth' ConfigMap. apiVersion : auth.ops42.org/v1alpha1 kind : AwsAuthSyncConfig metadata : name : default namespace : kube-system spec : syncIamGroups : - source : dev-operator-k8s-admins dest : dev-operator-k8s-admins - source : dev-operator-k8s-users dest : dev-operator-k8s-users Assuming the user named 'john' is a member of both, 'dev-operator-k8s-admins' and 'dev-operator-k8s-users' groups, while user 'fred' is only a member of the 'dev-operator-k8s-users' group in IAM, aws-auth ConfigMap will be modified accordingly: ... mapUsers : | - userarn: arn:aws:iam::XXXXXXXXXXXX:user/john username: john groups: - dev-operator-k8s-admins - dev-operator-k8s-users - userarn: arn:aws:iam::XXXXXXXXXXXX:user/fred username: fred groups: - dev-operator-k8s-users IMPORTANT The operator rewrites the data.mapUsers part of the aws-auth configmap. Other parts remain untouched.","title":"Usage"}]}